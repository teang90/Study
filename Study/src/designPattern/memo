참고
https://shlee0882.tistory.com/188
https://niceman.tistory.com/141?category=940951 ★★★★☆
https://www.tutorialspoint.com/design_pattern/design_pattern_quick_guide.htm  ★★★★☆
https://gmlwjd9405.github.io/2018/07/06/design-pattern.html ★★★★☆

팩토리 vs 전략 
https://www.it-swarm-ko.tech/ko/java/%ed%8c%a9%ed%86%a0%eb%a6%ac-%ed%8c%a8%ed%84%b4%ea%b3%bc-%ec%a0%84%eb%9e%b5-%ed%8c%a8%ed%84%b4%ec%9d%98-%ec%b0%a8%ec%9d%b4%ec%a0%90%ec%9d%80-%eb%ac%b4%ec%97%87%ec%9e%85%eb%8b%88%ea%b9%8c/957773712/

[디자인 패턴 구조]
- 컨텍스트(context) : 문제가 발생하는 여러 상황을 말한다. -> 패턴이 적용될 수 있는 상황을 나타냄
- 문제(problem)    : 패턴이 적용되어 해결될 필요가 있는 디자인 이슈들을 기술(여러 제약사항과 영향도를 고려해야함)
- 해결(solution)   : 문재 해결을 위한 설계 구성 요소, 그들 간의 관계, 책임 등을 기술, 해결은 반드시 구체적인 구현 방법이나, 언어에 의존적이지 않으며, 다양한 상황에 적용할 수 있는 일종의 템플릿

[종류]
 생성, 구조, 행위 기준으로 약 23가지 패턴을 분류
 


1) 생성 : 객체 생성 관련, 객체의 생성과 조합을 캡슐화 하여 / 특정 객체 생성 및 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공한다.
	추상 팩토리(Abstract Factory)
	구제적인 클래스에 의존하지 않고 서로 연관되거나 의존적인 객체들의 조합을 만드는 인터페이스를 제공하는 패턴
	팩토리 메서드(Factory Method)
	객체 생성 처리를 서브 클래스로 분리해 처리하도록 캡슐화하는 패턴
	싱글턴(Singleton)
	전역 변수를 사용하지 않고 객체를 하나만 생성하도록 하며, 생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴

2) 구조 : 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴 / ex)서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나, 객체들을 서로 묶어 새로운 기능을 제공하는 패턴 
	컴퍼지트(Composite)
	여러 개의 객체들로 구성된 복합 객체와 단일 객체를 클라이언트에서 구별 없이 다루게 해주는 패턴
	데커레이터(Decorator)
	객체의 결합을 통해 기능을 동적으로 유연하게 확장할 수 있게 해주는 패턴
	
3) 행위 : 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴 / 한 객체가  혼자 수행할 수 없는 작업을 여러 객체로 어떻게 분배하는지 & 객체 사이의 결합도 최소화에 중점을둔다. 
	옵서버(Observer)
	한 객체의 상태 변화에 따라 다른 객체의 상태도 연동되도록 일대다 객체 의존 관계를 구성하는 패턴
	스테이트(State)
	객체의 상태에 따라 객체의 행위 내용을 변경해주는 패턴
	스트래티지(Strategy)
	행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 패턴
	템플릿 메서드(Template Method)
	어떤 작업을 처리하는 일부분을 서브 클래스로 캡슐화해 전체 일을 수행하는 구조는 바꾸지 않으면서 특정 단계에서 수행하는 내역을 바꾸는 패턴
	커맨드(Command)
	실행될 기능을 캡슐화함으로써 주어진 여러 기능을 실행할 수 있는 재사용성이 높은 클래스를 설계하는 패턴

https://gmlwjd9405.github.io/2018/07/06/design-pattern.html
 													
  											     
 
 





